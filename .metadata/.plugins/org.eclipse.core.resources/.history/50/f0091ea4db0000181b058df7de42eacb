package com.internousdev.kokotown.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import org.apache.commons.lang3.StringUtils;

import com.internousdev.kokotown.dto.ProductInfoDTO;
import com.internousdev.kokotown.util.DBConnector;

public class ProductSearchDAO {

	private DBConnector db = new DBConnector();

	private Connection con = db.getConnection();

	public ArrayList<ProductInfoDTO> producutSerachDTOList = new ArrayList<>();


	private String sort;





/*検索結果（１ページに表示する商品情報取得）*/
	public ArrayList<ProductInfoDTO> getPuroductSerachResult(String serachWord, String categoryId, int page, int sortCategory, int sortFlg, int display){






		/*
		 *複数検索ワードをスペースで区切る配列
		 */
		String[] keyWord = serachWord.replace("|","hogehoge").replace("_","|_").replace("　"," ").replace("%","|%").split("[\\s]+");


		/*
		 * 検索ワードの検索条件（1単語）
		 */
		String condition =" AND (product_name LIKE ? COLLATE utf8_unicode_ci  ESCAPE '|' OR product_name_kana LIKE ? COLLATE utf8_unicode_ci  ESCAPE '|')";



		/*
		 *複数検索条件
		 */
		String conditions = StringUtils.repeat(condition, keyWord.length);



		switch(sortCategory){
		case 1:
			if(sortFlg==0){
			sort=" ORDER BY product_name_kana DESC";
			}else{
				sort=" ORDER BY product_name_kana";}
				break;

		case 2:
			if(sortFlg==0){
				sort=" ORDER BY price DESC";
				}else{
					sort=" ORDER BY price";}
					break;

		case 3:
			if(sortFlg==0){
				sort=" ORDER BY release_date DESC";
				}else{
					sort=" ORDER BY release_date";}
					break;

		}








		try{
			String sql =""
					+"SELECT product_info.id,product_id, product_name, product_name_kana,product_info.category_id, price, image_file_name, image_file_path,release_date"
					+" FROM product_info"
					+" INNER JOIN m_category"
					+" ON product_info.category_id = m_category.category_id"
					+" WHERE product_info.category_id LIKE ?"
					+ conditions
					+ sort
					+" LIMIT ? OFFSET ?"
					;




			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, categoryId+"%");

			int i=0;
			int k=2;
			while(i<keyWord.length){
				ps.setString(k++, "%"+keyWord[i]+"%");
				ps.setString(k++, "%"+keyWord[i]+"%");
				i++;
			}
			ps.setInt((keyWord.length)*2+2,display);
			ps.setInt((keyWord.length)*2+3,page);
			ResultSet rs = ps.executeQuery();


		while(rs.next()){
			ProductInfoDTO dto = new ProductInfoDTO();
			dto.setId(rs.getInt("product_info.id"));
			dto.setProductId(rs.getInt("product_id"));
			dto.setProductName(rs.getString("product_name"));
			dto.setProductNameKana(rs.getString("product_name_kana"));
			dto.setCategoryId(rs.getInt("category_id"));
			dto.setPriceComma(String.format("¥ %,d", rs.getInt("price")));
			dto.setImageFileName(rs.getString("image_file_name"));
			dto.setImageFilePath(rs.getString("image_file_path"));
			dto.setReleaseDate(rs.getString("release_date"));
			producutSerachDTOList.add(dto);

		}
	}catch(SQLException e){
		e.printStackTrace();
	}
		try{
		con.close();
	}catch(SQLException e){
		e.printStackTrace();
	}

		return producutSerachDTOList;

 }




}



